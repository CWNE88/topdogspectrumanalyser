#!/bin/python3
import sys
import numpy as np
from PyQt6 import QtWidgets, QtCore
import pyqtgraph as pg
import sys
import numpy as np
import pyqtgraph as pg
from PyQt6.QtWidgets import QApplication
from PyQt6 import QtCore
from rtlsdr import RtlSdr
from scipy.fft import fft
from concurrent.futures import ThreadPoolExecutor



class Waterfall(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        print ("Waterfall init")
        self.setWindowTitle("Top Dog Spectrum Analyser")
        self.setGeometry(100, 500, 1500, 600)

        # Create the plot widget
        self.widget = pg.GraphicsLayoutWidget(show=True)
        


        self.max_hold_levels = None



        layout = QtWidgets.QVBoxLayout(self)
        layout.addWidget(self.widget)

        # Prepare data
        self.power_levels = 100
        self.frequency_bins = 100
        
        self.waterfall_array = np.zeros((self.power_levels, self.frequency_bins))

        # Create a plot item
        self.plot_item = self.widget.addPlot()
        self.image_item = pg.ImageItem()
        self.plot_item.addItem(self.image_item)

        # Set plot labels once
        self.plot_item.setLabel('left', 'History (Frames)')
        self.plot_item.setLabel('bottom', 'Frequency Bins')
 


        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self.update_plot)
        self.timer.start(20)

    def update_widget_data(self, power_levels, max_hold_levels, frequency_bins):
        if power_levels is not None and max_hold_levels is not None and frequency_bins is not None:
            self.power_levels = power_levels
            self.max_hold_levels = max_hold_levels
            self.frequency_bins = frequency_bins
            
    def update_plot(self):
        if self.power_levels is not None and self.frequency_bins is not None:
            self.waterfall_array[:-1] = self.waterfall_array[1:]  # Shift
            self.waterfall_array[-1] = self.power_levels
            min_val = 0  # Set this to the minimum expected value
            max_val = 20  # Set this to the maximum expected value (adjust as needed)
            self.image_item.setImage(self.waterfall_array.T, autoLevels=False, levels=(min_val, max_val))