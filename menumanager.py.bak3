class MenuManager:
    def __init__(self, option_callback=None):
        self.current_menu = None
        self.current_submenu = None
        self.current_sub_submenu = None
        self.option_callback = option_callback
        
        # Define the menu structure
        self.menu_data = {
            "Frequency": {
                "submenus": {
                    "Centre": {
                        "options": ["Set Centre Frequency"]
                    },
                    "Start": {
                        "options": ["Set Start Frequency"]
                    },
                    "Stop": {
                        "options": ["Set Stop Frequency"]
                    }
                }
            },
            "Span": {
                "submenus": {}
            },
            "Amplitude": {
                "submenus": {}
            },
            "Mode": {
                "submenus": {}
            },
            "Input": {
                "submenus": {
                    "RTL FFT": {
                        "submenus": {
                            "Bias Tee": {
                                "options": ["On", "Off"]
                            },
                            "Gain": {
                                "options": ["AGC", "Medium", "High"]
                            }
                        }
                    },
                    "HackRF FFT": {},
                    "Audio": {}
                }
            }
        }

    def set_callback(self, callback):
        """Set the callback function for menu options."""
        self.option_callback = callback

    def select_menu(self, menu_name):
        """Select a top-level menu."""
        if menu_name in self.menu_data:
            self.current_menu = menu_name
            self.current_submenu = None
            self.current_sub_submenu = None
            print(f"Selected menu: {menu_name}")
        else:
            print(f"Menu '{menu_name}' does not exist.")

    def select_submenu(self, submenu_name):
        """Select a submenu under the current menu."""
        if self.current_menu is None:
            print("No menu selected.")
            return

        if submenu_name in self.menu_data[self.current_menu]["submenus"]:
            self.current_submenu = submenu_name
            self.current_sub_submenu = None
            print(f"Selected submenu: {submenu_name}")
            self.update_button_labels()  # Update button labels when submenu is selected
        else:
            print(f"Submenu '{submenu_name}' does not exist in '{self.current_menu}'.")

    def get_button_labels(self):
        """Return button labels for the current submenu."""
        if self.current_menu is None:
            print("No menu selected.")
            return []

        submenus = self.menu_data[self.current_menu]["submenus"]
        if self.current_submenu in submenus:
            # Return options for the current submenu
            return submenus[self.current_submenu]["options"]
        
        return []

    def update_button_labels(self):
        """Update the button labels based on the current submenu."""
        button_labels = self.get_button_labels()
        # Here you would typically update the UI elements with button_labels
        print(f"Updated button labels: {button_labels}")

    def handle_button_press(self, button_index):
        """Handle the selection of a button in the current submenu."""
        if self.current_submenu is None:
            print("No submenu selected.")
            return

        submenus = self.menu_data[self.current_menu]["submenus"]
        if self.current_submenu in submenus:
            options = submenus[self.current_submenu]["options"]
            if 0 <= button_index < len(options):
                option = options[button_index]
                if self.option_callback:
                    self.option_callback(self.current_menu, self.current_submenu, option)
                print(f"Action triggered: {self.current_submenu} - Option {option} selected")
            else:
                print("Invalid option index.")
        else:
            print(f"Submenu '{self.current_submenu}' does not exist.")

# Example callback function
def example_callback(menu, submenu, option):
    print(f"Callback executed: {menu} - {submenu} - {option}")

# Example usage
menu_manager = MenuManager(option_callback=example_callback)

# Navigate through the menu
menu_manager.select_menu("Frequency")
menu_manager.select_submenu("Centre")  # Selecting the Centre submenu
menu_manager.handle_button_press(0)  # This will trigger "Set Centre Frequency"
