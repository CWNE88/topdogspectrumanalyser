class MenuManager:
    def __init__(self, option_callback=None):
        self.current_menu = None
        self.current_submenu = None
        self.current_sub_submenu = None
        self.option_callback = option_callback
        
        # Define the menu structure
        self.menu_data = {
            "Frequency": {
                "submenus": {
                    "Centre": {},
                    "Start": {},
                    "Stop": {}
                }
            },
            "Span": {
                "submenus": {}
            },
            "Amplitude": {
                "submenus": {}
            },
            "Mode": {
                "submenus": {}
            },
            "Input": {
                "submenus": {
                    "RTL FFT": {
                        "submenus": {
                            "Bias Tee": {
                                "options": ["On", "Off"]
                            },
                            "Gain": {
                                "options": ["Low", "Medium", "High"]
                            }
                        }
                    },
                    "HackRF FFT": {},
                    "Audio": {}
                }
            }
        }

    def set_callback(self, callback):
        """Set the callback function for menu options."""
        self.option_callback = callback

    def select_menu(self, menu_name):
        """Select a top-level menu."""
        if menu_name in self.menu_data:
            self.current_menu = menu_name
            self.current_submenu = None
            self.current_sub_submenu = None
            print(f"Selected menu: {menu_name}")
        else:
            print(f"Menu '{menu_name}' does not exist.")

    def select_submenu(self, submenu_name):
        """Select a submenu under the current menu."""
        if self.current_menu is None:
            print("No menu selected.")
            return

        if submenu_name in self.menu_data[self.current_menu]["submenus"]:
            self.current_submenu = submenu_name
            self.current_sub_submenu = None
            print(f"Selected submenu: {submenu_name}")
        else:
            print(f"Submenu '{submenu_name}' does not exist in '{self.current_menu}'.")

    def select_sub_submenu(self, sub_submenu_name):
        """Select a sub-submenu under the current submenu."""
        if self.current_submenu is None:
            print("No submenu selected.")
            return

        submenus = self.menu_data[self.current_menu]["submenus"].get(self.current_submenu, {})
        if "submenus" in submenus and sub_submenu_name in submenus["submenus"]:
            self.current_sub_submenu = sub_submenu_name
            print(f"Selected sub-submenu: {sub_submenu_name}")
        else:
            print(f"Sub-submenu '{sub_submenu_name}' does not exist in '{self.current_submenu}'.")

    def show_submenu(self, submenu_name):
        """Display the options for the selected submenu."""
        if self.current_menu is None:
            print("No menu selected.")
            return

        if submenu_name in self.menu_data[self.current_menu]["submenus"]:
            self.select_submenu(submenu_name)
            options = self.get_button_labels()
            if options:
                print(f"Available options in '{submenu_name}': {options}")
            else:
                print(f"No options available in submenu '{submenu_name}'.")
        else:
            print(f"Submenu '{submenu_name}' does not exist in '{self.current_menu}'.")

    def get_button_labels(self):
        """Return button labels for the current submenu or sub-submenu."""
        if self.current_menu is None:
            print("No menu selected.")
            return []

        menu_data = self.menu_data[self.current_menu]

        if self.current_submenu is None:
            return list(menu_data["submenus"].keys())

        submenus = menu_data["submenus"]
        if self.current_submenu in submenus:
            # Check for options in the current submenu
            if "options" in submenus[self.current_submenu]:
                return submenus[self.current_submenu]["options"]
            # If there are no options, check for sub-submenus
            elif "submenus" in submenus[self.current_submenu]:
                return list(submenus[self.current_submenu]["submenus"].keys())

        return []

    def option_selected(self, button_index):
        """Handle the selection of an option."""
        if self.current_submenu is None:
            print("No submenu selected.")
            return

        submenus = self.menu_data[self.current_menu]["submenus"]
        
        if self.current_submenu in submenus:
            # If we're in a sub-submenu
            if self.current_sub_submenu:
                sub_submenus = submenus[self.current_submenu]["submenus"]
                if self.current_sub_submenu in sub_submenus and "options" in sub_submenus[self.current_sub_submenu]:
                    options = sub_submenus[self.current_sub_submenu]["options"]
                    if 0 <= button_index < len(options):
                        option = options[button_index]
                        if self.option_callback:
                            self.option_callback(self.current_menu, self.current_submenu, option)
                        print(f"Action triggered: {self.current_submenu} - {self.current_sub_submenu} - Option {option} selected")
                    else:
                        print("Invalid option index.")
                else:
                    print(f"No options available in sub-submenu '{self.current_sub_submenu}'.")
            # If in a submenu with options
            else:
                if "options" in submenus[self.current_submenu]:
                    options = submenus[self.current_submenu]["options"]
                    if 0 <= button_index < len(options):
                        option = options[button_index]
                        if self.option_callback:
                            self.option_callback(self.current_menu, self.current_submenu, option)
                        print(f"Action triggered: {self.current_submenu} - Option {option} selected")
                    else:
                        print("Invalid option index.")
                else:
                    print(f"No options available in submenu '{self.current_submenu}'.")
        else:
            print(f"Submenu '{self.current_submenu}' does not exist.")

# Example callback function
def example_callback(menu, submenu, option):
    print(f"Callback executed: {menu} - {submenu} - {option}")

# Example usage
menu_manager = MenuManager(option_callback=example_callback)

# Navigate through the menu
menu_manager.select_menu("Input")
menu_manager.show_submenu("RTL FFT")
menu_manager.select_sub_submenu("Bias Tee")
print("Available options:", menu_manager.get_button_labels())
menu_manager.option_selected(0)  # Selecting "On"
menu_manager.option_selected(1)  # Selecting "Off"
